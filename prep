//some questions to practice  for the interviews
//we will solve all the variety of questions and i will try to be awake for as many hours possible while solving so lets keep going!!!!
//the language would be c++

/*Problem Description :
The function accepts two positive integers ‘r’ and ‘unit’ and a positive integer array ‘arr’ of size ‘n’ as its argument ‘r’ represents the number of rats present in an area, ‘unit’ is the amount of food each rat consumes and each ith element of array ‘arr’ represents the amount of food present in ‘i+1’ house number, where 0 <= i

Note:

Return -1 if the array is null
Return 0 if the total amount of food from all houses is not sufficient for all the rats.
Computed values lie within the integer range.*/

#include<bits/stdc++.h>
using namsapce std;
int calculate(int r ,int unit,int arr[],int n){
    if(n==0){
        return 0;
    }
    int tot=r*unit;
    int foodu=0;
    int house=0;
    for(house=0;house<n;house++){
        foodu+=arr[house];
        if(foodu>=tot){
            break;
        }
    }
    if(tot>foodu){
        return 0;
    }
    return house+1;//because the orignal array is zero indexed
}
int main(){
    int r;
    cin>>r;
    int unit;
    cin>>unit;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout>>calculate(r,unit,arr,n);
    return 0;
}
}

/*Problem Description :
The Binary number system only uses two digits, 0 and 1 and number system can be called binary string. You are required to implement the following function:

int OperationsBinaryString(char* str);

The function accepts a string str as its argument. The string str consists of binary digits eparated with an alphabet as follows:

– A denotes AND operation
– B denotes OR operation
– C denotes XOR Operation
You are required to calculate the result of the string str, scanning the string to right taking one opearation at a time, and return the same.

Note:

No order of priorities of operations is required
Length of str is odd
If str is NULL or None (in case of Python), return -1*/

#include<bits/stdc++.h>//second question
using namespace std;
int opreation(char *str){
    if(str==NULL){
        return -1;
    }
    int i=1;
    int a=*str-'0';//pick the first question
    str++;
    while(*str!= '\0'){
        cahr  p= *str;//pick the symbol
        str++;//moving to the next number
        if(p=='A'){
            a &= (*str-'0');

        }
        else if(p== 'B'){
            a |=(*str-'0');
        }
        else{
            a ^= (*str-'0');

        }
        str++;
    }
    return a;
}

int main(){
    string s;
    getline(cin,s);
    char *str=&s[0];
    cout<<operation(str);

}

/*Question 3
You are given a function.
int CheckPassword(char str[], int n);
The function accepts string str of size n as an argument. Implement the function which returns 1 if given string str is valid password else 0.
str is a valid password if it satisfies the below conditions.

– At least 4 characters
– At least one numeric digit
– At Least one Capital Letter
– Must not have space or slash (/)
– Starting character must not be a number*/

int check(cahr str[],itn n){
    if(n<4){
        return 0;//if the lenght is less then
    }
    if(str[0]-'0' >=0 && str[0]-'0'<=9){
        return 0;//if the first cahrecter is a number
    }
    int a=0;
    int cap=0;
    int nu=0;
    while(a<n){
        if(str[a]==' ' || str[a]=='/'){
            return 0;//if there is space or slash
        }
        if(str[a]>=65 && str[a]<=96){
            cap++;//counting the capital letters 
        }
        else if(str[a]-'0 '>= 0 && str[a]-'0' <=9){
            nu++;//counting the numbers
        }
        a++;
    }
    return cap>0 && nu>0;
}

int main(){
    string s;
    getline(cin,s);
    int len=s.size();
    char *c=&s[0];
    cout<<check(c,len);
}

/*Question 4 
int findCount(int arr[], int length, int num, int diff);

The function accepts an integer array ‘arr’, its length and two integer variables ‘num’ and ‘diff’. Implement this function to find and return the number of elements of ‘arr’ having an absolute difference of less than or equal to ‘diff’ with ‘num’.
Note: In case there is no element in ‘arr’ whose absolute difference with ‘num’ is less than or equal to ‘diff’, return -1.

Example:
Input:

arr: 12 3 14 56 77 13
num: 13
diff: 2*/
#include<bits/stdc++.h>
using namespace std;

int findCount(int arr[],int length,int num,int diff){
    int count=0;
    for(int i=0;i<length;i++){
        if(abs(arr[i]-num)<=diff){
            count++;
        }
    }
    return count>0?count:-1;
}
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int num;
    cin>>num;
    int diff;
    cin>>diff;
    cout<<findCount(arr,n,num,diff);
    return 0;
}

/*Question 5
def differenceofSum(n. m)

The function accepts two integers n, m as arguments Find the sum of all numbers in range from 1 to m(both inclusive) that are not divisible by n. Return difference between sum of integers not divisible by n with sum of numbers divisible by n.

Assumption:

n>0 and m>0
Sum lies between integral range
*/

#include<bits/stdc++.h>
using namespace std;
int solve(int n,int m){
    int it,sum1=0,sum2=0;
    for(i=0;i<n;i++){
        if(i%n ==0 ){
            sum1+=i;
        }
        else{
            sum2+=i;
        }
    }
    if(sum2>sum1){
        return sum2-sum1;
    }
    else{
        return sum1-sum2;
    }
}
int main(){
    int n,m;
    int result;
    cin>>n;
    cin>>m;
    result=solve(n,m);
    cout<<result;
    return 0;
}

/*Question 6

The function accepts an integers arr of size ’length’ as its arguments you are required to return the sum of second largest  element from the even positions and second smallest from the odd position of given ‘arr’

Assumption:

All array elements are unique
Treat the 0th position as even
NOTE

Return 0 if array is empty
Return 0, if array length is 3 or less than 3*/

#include<bits/stdc++.h>
using namespace std;
int largestsmallest(vector<int>&arr){
    int length=arr.size();
    if(length<=3){
        return  0;
    }
    vector<int>evenpos;
    vector<int>oddpos;
    for(int i=0;i<n;i++){
        if(i%2==0){
            evenpos.push_back(arr[i]);
        }
        else{
            oddpos.push_back(arr[i]);
        }

    }
    sort(evenpos.rbegin(),evenpos.rend());
    sort(odd.begin(),odd.end());
    return evenpos[l]+oddpos[l];
}

int main(){
    vector<int>arr={1,2,4,5,35,6,8};
    int result=largestsmallest(arr);
    cout<<reslt<<endl;
    return 0;
}

/*Question 7
The function accepts an integers sum and an integer array arr of size n. Implement the function to find the pair, (arr[j], arr[k]) where j!=k, Such that arr[j] and arr[k] are the least two elements of array (arr[j] + arr[k] <= sum) and return the product of element of this pair

NOTE

Return -1 if array is empty or if n<2
Return 0, if no such pairs found
All computed values lie within integer range*/

#include<bits/stdc++.h>
using namsapce std;

int product(int *array, int n,int sum){
    int ans,temp,i,j,check;
    if(n<2){
        ans=-1;
    }
    else{
        for(i=0;i<n;i++){
            for(j=i+1;j<n;j++){
                if(array[i]>array[j]){
                    temp=array[i];
                    array[i]=array[j];
                    array[j]=temp;
                }
            }
        }
        check=array[0]+array[l];
        if(check<=sum){
            ans=array[0]*array[1];
        }
        else{
            ans=0;
        }
    }
    return ans;
}
int main(){
    int n,m,result,i;
    cin>>sum;
    cin>>n;
    int *array=new int[n];
    for(i=0;i<n;i++){
        cin>>array[i];
    }
    result=product(array,n,sum);
    cout<<result;
    delete[]array;
    return 0;
}

/*Question 8
N-base notation is a system for writing numbers that uses only n different symbols, This symbols are the first n symbols from the given notation list(Including the symbol for o) Decimal to n base notation are (0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:A,11:B and so on upto 35:Z)

Implement the following function

Char* DectoNBase(int n, int num):

The function accept positive integer n and num Implement the function to calculate the n-base equivalent of num and return the same as a string

Steps:

Divide the decimal number by n,Treat the division as the integer division
Write the the remainder (in  n-base notation)
Divide the quotient again by n, Treat the division as integer division
Repeat step 2 and 3 until the quotient is 0
The n-base value is the sequence of the remainders from last to first
Assumption:
1 < n < = 36

Example

Input
n: 12
num: 718

Output
4BA

Explanation
num       Divisor       quotient       remainder
718           12               59                 10(A)
59             12                4                   11(B)
4               12                0                   4(4)

Sample Input
n: 21
num: 5678

Sample Output
CI8*/

#include<bits/stdc++.h>
using namespace std;
string decitoNBase(int n,int num){
    string res="";
    int quotient=num/n;
    vector<int>rem;

    rem.push_back(num%n);
    while(quotient!=0){
        rem.push_back(quotient%n);
        quotient=quotient/n;
    }
    for(i=0;i<n;i++){
        if(rem[i]>9){
            res=(char)(rem[i]+55)+res;
        }
        else{
            res=to_string(rem[i])+res;
        }
    }
    return res;
}
int main(){
    int n,m;
    cin>>n>>num;
    cout<<decitoNBase(n,num);
    return 0;
}
/*Question 9
char*MoveHyphen(char str[],int n);

The function accepts a string “str” of length ‘n’, that contains alphabets and hyphens (-). Implement the function to move all hyphens(-) in the string to the front of the given string.

NOTE:- Return null if str is null.

Example :-

Input:
str.Move-Hyphens-to-Front
Output:
—MoveHyphenstoFront
Explanation:-

The string “Move-Hyphens -to-front” has 3 hyphens (-), which are moved to the front of the string, this output is “— MoveHyphen”
*/
#incldue<bits/stdc++.h>
using namespace std;

string MoveHyphen(string s,int n){
    int count=0;
    for(int i=0;i<n;i++)}{
        if(s[i]=='-'){
            count++;
            s.erase(i,l);
        }
        else{
            i++;
        } 
    }
    while(count--){
        s='-'+s;
    }
    return s;
}
int main(){
    string s;
    cin>>s;
    int n=s.size();
    cout<<MoveHyphen(s,n);
    return 0;
}
/*Question 10


Problem Statement

A carry is a digit that is transferred to left if sum of digits exceeds 9 while adding two numbers from right-to-left one digit at a time

You are required to implement the following function.

Int NumberOfCarries(int num1 , int num2);

The functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. You are required to calculate and return  the total number of carries generated while adding digits of two numbers ‘num1’ and ‘ num2’.

Assumption: num1, num2>=0

Example:

Input
Num 1: 451
Num 2: 349
Output
2
Explanation:

Adding ‘num 1’ and ‘num 2’ right-to-left results in 2 carries since ( 1+9) is 10. 1 is carried and (5+4=1) is 10, again 1 is carried. Hence 2 is returned.

Sample Input

Num 1: 23

Num 2: 563

Sample Output

0*/

#include <bits/stdc++.h>
using namespace std;
int carrycounter(int num1 ,int num2){
    int carry=0;
    int carryCount=0;
    while(num1 >0 || num2>0){
        int digit1=num1%10;
        int digit2=nums2%10;
        int sum=digit1+digit2+carry;
        if(sum>=10){
            carry=1;
            carryCount++;
        }
        else{
            carry=0;
        }
        num1/=10;
        num2/=10;

    }
    return carryCount;
}
int main(){
    int num1=451;
    int num2=349;
    cout<<carrycounter(num1,num2)<<endl;
    return 0;
}